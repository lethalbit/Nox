name: "Nox Build"
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  schedule:
    - cron: "0 0 1 * *"

jobs:
  build-linux:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        compiler:
          - 'clang-8'
          - 'clang-9'
          - 'clang-10'
          - 'gcc-8'
          - 'gcc-9'
          - 'gcc-10'
        cpp_std:
          - 'gnu++17'
          # - 'gnu++2a'
      fail-fast: false
    steps:
      - name: Runtime environment
        shell: bash
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          echo ::set-env name=PATH::"$HOME/.local/bin:$PATH"
          echo ::set-env name=GITHUB_WORKSPACE::"`pwd`"
      - name: Setup GCC
        if: startsWith(matrix.compiler, 'gcc')
        shell: bash
        run: |
          CXX=${CC/#gcc/g++}
          sudo apt-add-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install $CC $CXX
          echo ::set-env name=CC::$CC
          echo ::set-env name=CXX::$CXX
        env:
          CC: ${{ matrix.compiler }}
      - name: Setup Clang
        if: startsWith(matrix.compiler, 'clang')
        shell: bash
        run: |
          sudo apt-add-repository "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic${CC/#clang/} main"
          sudo apt-get update
          CXX=${CC/#clang/clang++}
          sudo apt-get install $CC $CXX
          echo ::set-env name=CC::$CC
          echo ::set-env name=CXX::$CXX
        env:
          CC: ${{ matrix.compiler }}
      - name: Checkout Tanuki
        uses: actions/checkout@v2
        with:
          lfs: true
          submodules: true
      - name: Setup
        shell: bash
        run: |
          wget https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip
          sudo pip3 install --upgrade pip setuptools wheel
          pip3 install --user meson
          unzip ninja-linux.zip -d ~/.local/bin
          rm ninja-linux.zip
          sudo apt-get -y install python3-dev libedit-dev
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC --version
          $CXX --version

          meson --version
          ninja --version
      - name: Configure
        run: meson build --prefix=$HOME/.local -Dcpp_std=${{ matrix.cpp_std }} $BUILD_OPTS
      - name: Build
        run: ninja -C build

      - name: Install
        run: ninja -C build  install
